# vim: fdm=marker fdl=1:
#                  _                  _
#   ___ _ ____   _| |_ ___  _ __ ___ | |
#  / _ \ '_ \ \ / / __/ _ \| '_ ` _ \| |
# |  __/ | | \ V /| || (_) | | | | | | |
#  \___|_| |_|\_(_)\__\___/|_| |_| |_|_|
#
# SHELL ENVIRONMENT CONFIG
# Path -- added if dir exists {{{1
# go {{{2
[[path]]
val = '/usr/local/go/bin'
args = '-U --path'

[[path]]
val = '$HOME/go/bin'
args = '-Up --path'

# rust {{{2
[[path]]
val = '$HOME/.cargo/bin'
args = '-Up --path'

# fzf {{{2
[[path]]
val = '$HOME/.fzf/bin'
args = '-Up --path'

# luarocks {{{2
[[path]]
val = '$HOME/.luarocks/bin'
args = '-Ua --path'
desc = 'Binaries installed with luarocks'

# ruby gems {{{2
[[path]]
val = '$HOME/.gem/ruby/2.7.0/bin'
args = '-Ua --path'
desc = 'User dir for ruby gems'

# user directories {{{2
[[path]]
val = '$HOME/bin'
args = '-Up --path'
desc = 'User bin dir for scripts (tracked on git)'

[[path]]
val = '$HOME/.local/bin'
args = '-Up --path'
desc = 'Local user installs'

# asdf {{{2
[[path]]
val = '$HOME/.asdf/bin'
args = '-Ua --path'
desc = 'asdf binary dir'

# path config -- define entries BEFORE this line {{{2
[[env]]
key = 'PATH'
val = '''$(echo -n $PATH | awk -v RS=: -v ORS=: '!x[$0]++' | sed "s/\(.*\).\{1\}/\1/")'''
shell = ['bash']
quote = false
desc = 'De-duplicate path variable'

# [[env]]
# key = 'fish_user_paths'
# val = '''$(echo -n $fish_user_paths | awk -v RS=' ' -v ORS=\x1e '!x[$0]++' | sed "s/\(.*\).\{1\}/\1/")'''
# args = '-U'
# shell = ['fish']
# quote = false
# desc = 'De-duplicate path variable'

# Environment Variables {{{1
# user installations {{{2
[[env]]
key = 'LD_LIBRARY_PATH'
val = '$HOME/.local/lib'
cat = 'install'

[[env]]
key = 'MANPATH'
val = '$HOME/.local/share/man:'
cat = 'install'

[[env]]
key = 'PKG_CONFIG_PATH'
val = '$HOME/.local/lib/pkgconfig'
cat = 'install'

# general system {{{2
[[env]]
key = 'LANG'
val = 'en_US.utf8'
cat = 'system'
desc = 'Locale setting'

[[env]]
key = 'DOTDIR'
val = '$HOME/dotfiles'
cat = 'system'

[[env]]
key = 'XDG_CONFIG_HOME'
val = '$HOME/.config'
cat = 'system'

[[env]]
key = 'XDG_CACHE_HOME'
val = '$HOME/.cache'
cat = 'system'

[[env]]
key = 'XDG_DATA_HOME'
val = '$HOME/.local/share'
cat = 'system'

[[env]]
key = 'LC_ALL'
val = 'en_US.utf-8'
cat = 'system'
desc = 'Default encoding'

[[env]]
key = 'BROWSER'
val = 'w3m'
cat = 'system'
desc = 'Text-based browser'

[[env]]
key = 'CDG_PATH'
val = """\
$HOME/git/python,\
$HOME/dotfiles,\
$HOME/.vim,\
$HOME/.vim/config,\
$XDG_CONFIG_HOME/fish,\
$XDG_CONFIG_HOME/fish/functions,\
$XDG_CONFIG_HOME/fish/completions,\
$XDG_CONFIG_HOME/fish/conf.d"""
cat = 'system'
shell = ['fish']
desc = 'Directories for cdg function (bookmarks)'

[[env]]
key = 'ARCH'
val = 'uname -m'
cat = 'system'
eval = true
desc = 'System cpu architecture'

# preferences {{{2
[[env]]
key = 'CLICOLOR'
val = '1'
cat = 'preferences'
desc = 'Use colors in prompt'

# ls after cd {{{2
[[env]]
key = 'LS_AFTER_CD'
val = '0'
cat = 'preferences'
desc = 'Use snippet in conf.d to echo dir after $PWD change'

[[env]]
key = 'LS_AFTER_CD_COMMAND'
val = 'exa -a --group-directories-first'
cat = 'preferences'
desc = 'Command to execute as `ls` on cd'

# LS_COLORS {{{2
[[env]]
key = 'LS_COLORS'
val = """
file="$HOME/.zinit/plugins/comfortablynick---LS_COLORS/LS_COLORS"
if [ -f "$file" ]; then
    dircolors -c "$file" | sed s/"setenv LS_COLORS "//
else
    dircolors -c $DOTDIR/dircolors.sh | sed s/"setenv LS_COLORS "//
fi"""
eval = true
desc = 'Exports $LS_COLORS for ls/exa/lsd (zsh has a plugin)'
shell = ['bash','fish']

# todo.txt {{{2
[[env]]
key = 'TODOTXT_CFG_FILE'
val = '$HOME/Dropbox/todo/todo.cfg'
cat = 'todo.txt'
desc = 'todo.txt config directory'

# todors {{{2
[[env]]
key = 'TODORS_CFG_FILE'
val = '$HOME/git/todors/tests/todo.toml'
cat = 'todors'
desc = 'todors toml config file location'

# lastpass cli {{{2
[[env]]
key = 'LPASS_DISABLE_PINENTRY'
val = '1'
cat = 'lpass'
desc = 'disable gui prompt for password'

# fish {{{2
[[env]]
key = 'FISH_PKG_MGR'
val = 'Fisher'
cat = 'fish'
shell = ['fish']

[[env]]
key = 'FISH_PLUGIN_PATH'
val = '$XDG_DATA_HOME/fish_plugins'
cat = 'fish'
shell = ['fish']
desc = 'Plugin path for manual install'

[[env]]
key = 'FISH_THEME'
val = 'yimmy'
cat = 'fish'
shell = ['fish']

[[env]]
key = 'FISH_SSH_THEME'
val = 'yimmy'
cat = 'fish'
shell = ['fish']

[[env]]
key = 'async_prompt_inherit_variables'
val = 'all'
cat = 'fish'
shell = ['fish']

# python {{{2
[[env]]
key = 'VIRTUAL_ENV_DISABLE_PROMPT'
val = '1'
cat = 'python'
shell = ['fish']
desc = 'Disable default venv prompt'

[[env]]
key = 'NVIM_PY2_DIR'
val = '$HOME/.env/nvim2/bin/python'
cat = 'python'
desc = 'Neovim Python 2 venv'

[[env]]
key = 'NVIM_PY3_DIR'
val = '$HOME/.env/nvim3/bin/python'
cat = 'python'
desc = 'Neovim Python 3 venv'

[[env]]
key = 'PIPX_BIN_DIR'
val = '$HOME/.local/bin'
cat = 'python'
desc = 'Install root of pipx binaries'

[[env]]
key = 'PIPENV_VENV_IN_PROJECT'
val = '1'
cat = 'python'
desc = 'Create pipenv virtualenv inside project directory'

# vim {{{2
[[env]]
key = 'VISUAL'
val = 'nvim'
cat = 'vim'
desc = 'Default visual text editor'

[[env]]
key = 'EDITOR'
val = '$VISUAL'
cat = 'vim'
desc = 'Default terminal text editor'

[[env]]
key = 'VDOTDIR'
val = '$DOTDIR/.config/nvim'
cat = 'vim'
desc = 'Master (n)vim dotfile directory'

[[env]]
key = 'VIM_COLOR'
val = 'PaperColor-dark'
cat = 'vim'
desc = 'Vim color theme'

[[env]]
key = 'NVIM_COLOR'
val = 'PaperColor-dark'
cat = 'vim'
desc = 'Neovim color theme'

# fuzzy finding {{{2
[[env]]
key = 'FZF_TMUX'
val = '0'
cat = 'fuzzy'
desc = 'Use FZF for TMUX'

[[env]]
key = 'FZF_TMUX_HEIGHT'
val = '40%'
cat = 'fuzzy'
desc = 'Panel height for fzf-tmux'

# [[env]]
# key = 'FZF_TAB_COMMAND'
# val = '[ "$FZF_TMUX" -eq 1 ] && echo "fzf-tmux" || echo "fzf"'
# cat = 'fuzzy'
# desc = 'Command for shell tab completion'
# eval = true

# TODO: get quoting right
# [[env]]
# key = 'FZF_TAB_COMMAND'
# val = """fzf-tmux --ansi \
# --expect='$continuous_trigger' \
# '--color=hl:$(( $#headers == 0 ? 108 : 255 ))' \
# --nth=2,3 --delimiter='\u0000' \
# --height=100% \
# --tiebreak=begin -m --bind=tab:down,btab:up,change:top,ctrl-space:toggle --cycle \
# '--query=$query' \
# '--header-lines=$#headers'"""
# cat = 'fuzzy'
# desc = 'Options for shell tab completion'

[[env]]
key = 'FZF_LEGACY_KEYBINDINGS'
val = '0'
cat = 'fuzzy'
shell = ['fish']
desc = 'Use legacy Fish FZF keybindings'

[[env]]
key = 'FZF_DEFAULT_COMMAND'
val = 'fd -t f -HL --color=always'
cat = 'fuzzy'

[[env]]
key = 'FZF_DEFAULT_OPTS'
val = '--ansi --height 40%'
cat = 'fuzzy'

[[env]]
key = 'FZF_PREVIEW_OPTS'
val = """--ansi \
--bind='?:toggle-preview' \
--bind='ctrl-u:preview-page-up' \
--bind='ctrl-d:preview-page-down' \
--preview-window='right:60%:wrap' \
--preview='bat --color=always --style=full --line-range :300 {} 2>/dev/null || tree -C {}'"""
cat = 'fuzzy'
desc = 'Default colors and options'

[[env]]
key = 'FZF_FIND_FILE_COMMAND'
val = '$FZF_DEFAULT_COMMAND'
cat = 'fuzzy'

[[env]]
key = 'FZF_FIND_FILE_OPTS'
val = '$FZF_PREVIEW_OPTS'
cat = 'fuzzy'

[[env]]
key = 'FZF_OPEN_COMMAND'
val = '$FZF_DEFAULT_COMMAND'
cat = 'fuzzy'
desc = 'Command used to open files with key shortcut'

[[env]]
key = 'FZF_OPEN_OPTS'
val = '$FZF_PREVIEW_OPTS'
cat = 'fuzzy'
desc = 'Options used to open files with key shortcut'

[[env]]
key = 'FZF_PREVIEW_FILE_CMD'
val = '$FZF_PREVIEW_OPTS'
cat = 'fuzzy'

[[env]]
key = 'FZF_PREVIEW_DIR_CMD'
val = 'exa -la --color=always'
cat = 'fuzzy'

[[env]]
key = 'FZF_ENABLE_OPEN_PREVIEW'
val = '1'
cat = 'fuzzy'
desc = 'Use preview for file open command'

[[env]]
key = 'FZF_CD_COMMAND'
val = 'fd -L -t d --color=always'
cat = 'fuzzy'
desc = 'Used to fuzzy cd'

[[env]]
key = 'FZF_CD_WITH_HIDDEN_COMMAND'
val = '"$FZF_CD_COMMAND -H"'
cat = 'fuzzy'
desc = 'Used to fuzzy cd with hidden dirs'
quote = false

[[env]]
key = 'FZF_CD_OPTS'
val = "--ansi --preview-window=right:60% --preview='$FZF_PREVIEW_DIR_CMD {}'"
cat = 'fuzzy'
desc = 'Display dir contents when using fzf to cd'

[[env]]
key = 'FZF_CTRL_T_COMMAND'
val = '$FZF_DEFAULT_COMMAND'
cat = 'fuzzy'

[[env]]
key = 'FZF_CTRL_T_OPTS'
val = '$FZF_PREVIEW_OPTS'
cat = 'fuzzy'

[[env]]
key = 'FZF_COMPLETION_OPTS'
val = '$FZF_PREVIEW_OPTS'
cat = 'fuzzy'

[[env]]
key = 'SKIM_DEFAULT_COMMAND'
val = 'rg --files --no-messages --hidden'
cat = 'fuzzy'

[[env]]
key = 'FZY_DEFAULT_COMMAND'
val = 'fd -t f -HL'
cat = 'fuzzy'

# go {{{2
[[env]]
key = 'GOPATH'
val = '$HOME/go'
cat = 'go'
desc = 'golang path folder'

[[env]]
key = 'GOBIN'
val = '$HOME/go/bin'
cat = 'go'
desc = 'golang binaries'

[[env]]
key = 'GO111MODULE'
val = 'auto'
cat = 'go'
desc = 'Enable module support'

# ripgrep (rg) {{{2
[[env]]
key = 'RIPGREP_CONFIG_PATH'
val = '$XDG_CONFIG_HOME/ripgrep/ripgreprc'
cat = 'ripgrep'
desc = 'Config file for rg'

# rust {{{2
[[env]]
key = 'CARGO_HOME'
val = '$HOME/.cargo'
cat = 'rust'
desc = 'cargo home'

# node/nvm {{{2
[[env]]
key = 'NVM_DIR'
val = '$HOME/.nvm'
cat = 'node'
desc = 'nvm home'

# vcprompt {{{2
[[env]]
key = 'VCPROMPT_FORMAT'
val = '%b@%r %m %u'
cat = 'vcprompt'
desc = 'default format string'

[[env]]
key = 'VCP_FORMAT'
val = '%n %b@%c%B%A%o|%s%m%u'
cat = 'vcprompt-rs'
desc = 'default format string'

# ansible {{{2
[[env]]
key = 'ANSIBLE_CONFIG'
val = '$HOME/.ansible/ansible.cfg'
cat = 'ansible'
desc = 'User config file'

[[env]]
key = 'DOTDROP_CONFIG'
val = '$DOTDIR/config.yaml'
cat = 'dotdrop'
desc = 'Dotdrop default config'

# tig {{{2
[[env]]
key = 'TIGRC_USER'
val = '$XDG_CONFIG_HOME/tig/tigrc'
cat = 'tig'
desc = 'Custom location for tig config'

# Abbreviations/Aliases {{{1
# autocorrect {{{2
[[abbr]]
key = 'weahter'
val = 'weather'
cat = 'autocorrect'
desc = 'Correct misspelling'

# git {{{2
[[abbr]]
key = 'g'
val = 'git'
cat = 'git'

[[abbr]]
key = 'ga'
val = 'fgit add'
cat = 'git'
desc = 'Select files to stage using fzf with diff in preview'

[[abbr]]
key = 'gc'
val = 'git commit'
cat = 'git'

[[abbr]]
key = 'gca'
val = 'git commit -a'
cat = 'git'

[[abbr]]
key = 'gpl'
val = 'git pull'
cat = 'git'

[[abbr]]
key = 'gpa'
# Use null byte separator just to handle filenames with spaces or newlines
val = 'fd -HIg0 -t d .git | fzf-tmux -m --read0 --print0 | xargs -P8 -0I{} git --git-dir={} pull'
cat = 'git'
desc = 'Select from all git repos under current directory and pull selected'

[[abbr]]
key = 'gph'
val = 'git push'
cat = 'git'

[[abbr]]
key = 'gs'
val = 'git status -s'
cat = 'git'

[[abbr]]
key = 'gcp'
val = 'git commit && git push'
cat = 'git'

[[abbr]]
key = 'gac'
val = 'fgit add && git commit'
cat = 'git'

[[abbr]]
key = 'gsync'
val = 'git pull && git add . && git commit && git push'
cat = 'git'

[[abbr]]
key = 'gco'
val = 'git checkout'
cat = 'git'

[[abbr]]
key = 'gcom'
val = 'git checkout master'
cat = 'git'

[[abbr]]
key = 'gcol'
val = 'git checkout $(git describe --tags $(git rev-list --tags --max-count=1))'
cat = 'git'

[[abbr]]
key = 'gd'
val = 'git diff'
cat = 'git'

[[abbr]]
key = 'gdf'
val = 'fgit diff'
cat = 'git'
desc = 'Open git diff in interactive fzf window'

[[abbr]]
key = 'gst'
val = 'fgit status'
cat = 'git'
desc = 'Show modified files and diff in fzf preview window'

[[abbr]]
key = 'gv'
val = 'vim +"packadd vim-fugitive" +"packadd gv.vim" +GV +"autocmd BufWipeout <buffer> qall"'
cat = 'git'
desc = 'Open interactive git log in vim'

[[abbr]]
key = 'vg'
val = 'vim +"packadd vim-fugitive" +G +"wincmd o"'
cat = 'git'
desc = 'Open fugitive and in vim'

[[abbr]]
key = 'glog'
val = 'git log --oneline --decorate --graph --all'
cat = 'git'
desc = 'Show git log in terminal'

[[abbr]]
key = 'grst'
val = 'git reset --hard origin/master'
cat = 'git'
desc = 'Overwrite local repo with remote'

[[abbr]]
key = 'gsub'
val = 'git submodule foreach --recursive git pull origin master'
cat = 'git'
desc = 'Update all submodules recursively'

[[abbr]]
key = 'gu'
val = '__git_fzf_git_unstage'
cat = 'git'
desc = 'Unstage file using fzf with diff preview'

[[abbr]]
key = 'grmi'
val = 'git rm --cached'
cat = 'git'
desc = 'Remove from git index but keep local filesystem copy'

[[abbr]]
key = 'gsp'
val = 'git stash && git pull && git stash pop'
cat = 'git'
desc = 'Save local changes, pull remote changes, and add local changes on top'

# general {{{2
[[abbr]]
key = 'h'
val = "$HOME"
cat = 'dirs'

# dotfiles {{{2
[[abbr]]
key = 'dot'
val = '$DOTDIR'
cat = 'dirs'

[[abbr]]
key = 'dotc'
val = '$EDITOR $DOTDIR/config.yaml'
cat = 'dirs'

# vim config {{{3
[[abbr]]
key = 'vid'
val = '$VDOTDIR'
cat = 'dirs'

[[abbr]]
key = 'via'
val = '$VDOTDIR/autoload'
cat = 'dirs'

[[abbr]]
key = 'viac'
val = '$VDOTDIR/autoload/config'
cat = 'dirs'

[[abbr]]
key = 'vil'
val = '$VDOTDIR/lua'
cat = 'dirs'

[[abbr]]
key = 'vip'
val = '$VDOTDIR/plugin'
cat = 'dirs'

[[abbr]]
key = 'viap'
val = '$VDOTDIR/after/plugin'
cat = 'dirs'

# fish config {{{3
[[abbr]]
key = 'fc'
val = '$XDG_CONFIG_HOME/fish'
cat = 'dirs'
shell = ['fish']
desc = 'Fish dir in $XDG_CONFIG_HOME (exclude on posix shells due to `fc` builtin)'

[[abbr]]
key = 'ffn'
val = '$XDG_CONFIG_HOME/fish/functions'
cat = 'dirs'
desc = 'Fish user functions dir'

[[abbr]]
key = 'fcm'
val = '$XDG_CONFIG_HOME/fish/completions'
cat = 'dirs'
desc = 'Fish user completions dir'

[[abbr]]
key = 'fcd'
val = '$XDG_CONFIG_HOME/fish/conf.d'
cat = 'dirs'
desc = 'Fish user config snippets'

# bash config {{{3
[[abbr]]
key = 'bcd'
val = '$XDG_CONFIG_HOME/bash/conf.d'
cat = 'dirs'
desc = 'Bash snippets dir'

[[abbr]]
key = 'bfd'
val = '$XDG_CONFIG_HOME/bash/functions'
cat = 'dirs'
desc = 'Bash functions dir'

# zsh config {{{3
[[abbr]]
key = 'zcd'
val = '$XDG_CONFIG_HOME/zsh/conf.d'
cat = 'dirs'
desc = 'Zsh snippet dir'

[[abbr]]
key = 'zfd'
val = '$XDG_CONFIG_HOME/zsh/functions'
cat = 'dirs'
desc = 'Zsh functions dir'

# shell {{{3
[[abbr]]
key = 'sfd'
val = '$XDG_CONFIG_HOME/shell/functions'
cat = 'dirs'
desc = 'Common shell functions dir'

[[abbr]]
key = 'ssd'
val = '$XDG_CONFIG_HOME/shell/scripts'
cat = 'dirs'
desc = 'Common shell scripts dir (not on PATH)'

[[abbr]]
key = 'scd'
val = '$XDG_CONFIG_HOME/shell/conf.d'
cat = 'dirs'
desc = 'Common shell snippets dir'

# commands {{{2
# misc apps {{{3
[[abbr]]
key = 'xo'
val = 'xonsh'
cat = 'misc'
desc = 'Open xonsh shell'

[[abbr]]
key = 'lp'
val = 'lpass'
cat = 'misc'
desc = 'LastPass cli'

[[abbr]]
key = 'vc'
val = 'vcprompt-rs'
cat = 'misc'
desc = 'Rust impl of vcprompt'

[[abbr]]
key = 'vcp'
val = 'vcprompt -f "%b %r %p %u %m"'
cat = 'misc'
desc = 'Fast git status using C'

[[abbr]]
key = 'vct'
val = 'vctest -f "%b %r %p %u %m"'
cat = 'misc'
desc = 'My fork of vctest'

[[abbr]]
key = 'vw'
val = 'view'
cat = 'misc'
desc = 'Call view function'

[[abbr]]
key = 'topgrade'
val = 'topgrade -y --no-retry'
cat = 'misc'
desc = 'Perform system updates with no user input'

[[abbr]]
key = 'lg'
val = 'lazygit'
cat = 'misc'
desc = 'Terminal interface for git status'

[[abbr]]
key = 'ts'
val = 'tig status'
cat = 'misc'

# cd {{{3
[[abbr]]
key = '...'
val = 'cd ../..'
cat = 'cd'

[[abbr]]
key = '....'
val = 'cd ../../..'
cat = 'cd'

[[abbr]]
key = '.....'
val = 'cd ../../../..'
cat = 'cd'

[[abbr]]
key = '......'
val = 'cd ../../../../..'
cat = 'cd'

[[abbr]]
key = '-'
val = 'cd'
cat = 'cd'
shell = ['fish']

[[abbr]]
key = 'c'
val = ' cdf'
cat = 'cd'
shell = ['fish']

[[abbr]]
key = 'c'
val = 'cd'
cat = 'cd'
shell = ['bash','zsh']

# directory nav {{{3
[[abbr]]
key = 'pd'
val = 'prevd'
cat = 'nav'
shell = ['fish']
desc = 'cd to previous dir'

[[abbr]]
key = 'nd'
val = 'nextd'
cat = 'nav'
shell = ['fish']
desc = 'cd to next dir'

[[abbr]]
key = 'pd'
val = 'pushd'
cat = 'nav'
shell = ['zsh']
desc = 'cd to previous dir'

[[abbr]]
key = 'nd'
val = 'popd'
cat = 'nav'
shell = ['zsh']
desc = 'cd to next dir'

[[abbr]]
key = 'rmdir'
val = 'rm -rf'
cat = 'nav'
desc = 'Remove directory and contents recursively'

# general {{{3
[[abbr]]
key = 'version'
val = 'cat /etc/os-release'
cat = 'cmds'
desc = 'View linux version'

[[abbr]]
key = 'lookbusy'
val = 'cat /dev/urandom | hexdump -C | rg "ca fe"'
cat = 'cmds'
desc = 'Displays a lot of TV-like code on the screen'

[[abbr]]
key = 'mntp'
val = 'sudo mount -t drvfs P: /mnt/p'
cat = 'cmds'
desc = 'Mount P: drive'

[[abbr]]
key = 'mv'
val = 'mv -v'
cat = 'cmds'
desc = 'Move files in verbose mode'

# ls {{{3
[[abbr]]
key = 'ls'
val = 'command ls -h --color=auto --group-directories-first'
cat = 'ls'
shell = ['bash','zsh']
desc = 'List all files'

[[abbr]]
key = 'lsa'
val = 'ls -ah'
cat = 'ls'
desc = 'List all files'

[[abbr]]
key = 'la'
val = 'ls -ah'
cat = 'ls'
desc = 'List all files'

[[abbr]]
key = 'll'
val = 'ls -lh'
cat = 'ls'
desc = 'List files in long format'

[[abbr]]
key = 'lla'
val = 'ls -lah'
cat = 'ls'
desc = 'List all files in long format'

[[abbr]]
key = 'lso'
val = 'stat -c "%a %A %3h %5U %5G %n" *'
cat = 'ls'
desc = 'List octal permissions'

# lsd {{{3
[[abbr]]
key = 'd'
val = 'lsd -alF --icon=never --group-dirs=first --date=relative'
cat = 'ls'
desc = 'fancy ls replacement with colors and icons'
shell = ['zsh','bash']

[[abbr]]
key = 'd'
val = ' d'
cat = 'ls'
desc = 'Keep lsd alias out of history'
shell = ['fish']

# exa {{{3
[[abbr]]
key = 'x'
val = 'exa -laFG --time-style=iso --group-directories-first'
cat = 'exa'
desc = 'another fancy ls replacement written in rust'

[[abbr]]
key = 'l'
val = 'exa -laFgH --group-directories-first --git --time-style=long-iso'
cat = 'exa'
desc = 'another fancy ls replacement written in rust -- with git status per file'

[[abbr]]
key = 'xt'
val = 'exa -TL3'
cat = 'exa'
desc = 'List as a tree, 3 levels deep'

# exit {{{3
[[abbr]]
key = 'q'
val = 'exit'
cat = 'cmds'

[[abbr]]
key = 'quit'
val = 'exit'
cat = 'cmds'

# chmod {{{3
[[abbr]]
key = 'che'
val = 'chmod +x'
cat = 'cmds'
desc = 'Assign execute permission for current user to file'

# dropbox cli {{{3
[[abbr]]
key = 'dropbox'
val = 'dropbox.py'
cat = 'cmds'
desc = 'Dropbox command-line interface'

[[abbr]]
key = 'db'
val = 'dropbox.py'
cat = 'cmds'
desc = 'Dropbox CLI'

[[abbr]]
key = 'dbr'
val = 'dropbox stop && dropbox start'
cat = 'cmds'
desc = 'Dropbox cli restart'

[[abbr]]
key = 'chr'
val = 'chmod 755'
cat = 'cmds'
desc = 'Assign standard permission to file'

# fuzzy finding {{{3
[[abbr]]
key = 'f'
val = '__fzf_find_file'
cat = 'cmds'
shell = ['fish']

[[abbr]]
key = 'f'
val = 'fzf-tmux'
cat = 'cmds'
shell = ['bash', 'zsh']

[[abbr]]
key = 'e'
val = 'eval $FZY_DEFAULT_COMMAND | fzy | xargs -r $EDITOR $file'
cat = 'cmds'
shell = ['bash']

[[abbr]]
key = 'e'
val = ' eval $FZY_DEFAULT_COMMAND | fzy | read file && print -z $EDITOR $(printf %q $file)'
cat = 'cmds'
shell = ['zsh']

[[abbr]]
key = 'e'
val = ' edit -f sweep -- -p $EDITOR'
cat = 'cmds'
shell = ['fish']

[[abbr]]
key = 'fe'
val = 'fzf-edit'
cat = 'cmds'
shell = ['bash', 'zsh']
desc = 'Helper script to open result in $EDITOR'

[[abbr]]
key = 'fe'
val = '__fzf_open --editor'
cat = 'cmds'
shell = ['fish']
desc = 'Helper script to open result in $EDITOR using fish script'

[[abbr]]
key = 'p'
val = 'fzf_cdhist'
cat = 'cmds'
shell = ['fish']
desc = 'FZF widget for cd history'

[[abbr]]
key = 'cf'
val = '__fzf_cd'
cat = 'cmds'
shell = ['fish']
desc = 'Use FZF to search for directory and CD'

# list.py {{{3
# [[abbr]]
# key = 'list'
# val = 'list.py'
# cat = 'cmds'
# desc = 'list.py script'
# shell = ['bash','zsh']
# #
# [[abbr]]
# key = 'l'
# val = 'list'
# cat = 'cmds'
# desc = 'list.py'
#
[[abbr]]
key = 'listd'
val = 'list --debug'
cat = 'cmds'
desc = 'debug list.py'

[[abbr]]
key = 'listh'
val = 'list --help'
cat = 'cmds'
desc = 'help for list.py'

# todo.txt tools {{{3
[[abbr]]
key = 't'
val = ' todo'
cat = 'cmds'
desc = 'todo.txt (keep out of history)'

[[abbr]]
key = 'tt'
val = 'todo.sh -d ~/git/todors/tests/todo.cfg'
cat = 'cmds'
desc = 'todo.sh'

[[abbr]]
key = 'td'
val = 'todors -d ~/Dropbox/todo/todo.toml'
cat = 'cmds'
desc = 'todors with real todo.txt file'

[[abbr]]
key = 'tp'
val = 'topydo'
cat = 'cmds'
desc = 'topydo.py'


# tmux {{{3
[[abbr]]
key = 'te'
val = """
$EDITOR $XDG_CONFIG_HOME/tmux/tmux.conf \
    && tmux source $XDG_CONFIG_HOME/tmux/tmux.conf \
    && tmux display 'tmux.conf sourced'"""
cat = 'cmds'
desc = 'Open tmux.conf and reload after editing'

[[abbr]]
key = 'tl'
val = 'tmux ls'
cat = 'cmds'
desc = 'List tmux sessions'

# vim {{{3
[[abbr]]
key = 'n'
val = 'nvim'
cat = 'cmds'

[[abbr]]
key = 'vvim'
val = 'command vim'
cat = 'cmds'
desc = 'Open vim executable regardless of $EDITOR'

[[abbr]]
key = 'vv'
val = 'command vim'
cat = 'cmds'
desc = 'Open vim executable regardless of $EDITOR'

[[abbr]]
key = 'sv'
val = 'sudo -E $EDITOR'
cat = 'cmds'
desc = 'Open editor with root privileges but maintaining environment'

[[abbr]]
key = 'vet'
val = '$EDITOR $DOTDIR/env.toml'
cat = 'cmds'
desc = 'Open env.toml in vim'

[[abbr]]
key = 'vrc'
val = '$EDITOR $VDOTDIR/init.vim'
cat = 'cmds'
desc = 'Open init.vim in vim'

[[abbr]]
key = 'task'
val = 'asynctask -f'
cat = 'cmds'
desc = 'Run asynctask outside of vim using fzf'

# fish shell {{{3
[[abbr]]
key = 'funced'
val = 'funced -s'
cat = 'cmds'
shell = ['fish']
desc = 'Save function after editing'

[[abbr]]
key = 'cm'
val = 'command'
cat = 'cmds'
shell = ['fish']
desc = 'Equivalent to `\` in bash'

[[abbr]]
key = 'fcf'
val = "$EDITOR $XDG_CONFIG_HOME/fish/config.fish"
cat = 'cmds'
desc = 'Edit config.fish in vim'

[[abbr]]
key = 'hd'
val = ' history delete'
cat = 'cmds'
shell = ['fish']
desc = 'Delete history matching pattern'

[[abbr]]
key = 'dl'
val = ' history delete $history[1] -eC'
cat = 'cmds'
shell = ['fish']
desc = 'Delete last history item (prefixed with space to exclude this cmd from history)'

[[abbr]]
key = 'dl'
val = ' remove_last_history_entry'
cat = 'cmds'
shell = ['zsh']
desc = 'Delete last history item (prefixed with space to exclude this cmd from history)'

[[abbr]]
key = 'path'
val = 'set -S PATH'
cat = 'cmds'
shell = ['fish']
desc = 'Print details of PATH variable'

# bash {{{3
[[abbr]]
key = 'brc'
val = '$EDITOR $DOTDIR/bashrc.sh'
cat = 'cmds'
desc = 'Open bashrc in vim'

[[abbr]]
key = 'mc'
val = '. mkdir_cd'
cat = 'cmds'
desc = 'Create dir and cd into it'
shell = ['bash']

# zsh {{{3
[[abbr]]
key = 'zshc'
val = '$EDITOR $DOTDIR/zshrc.zsh'
cat = 'cmds'
desc = 'Open zshrc in vim'

# shell {{{3
[[abbr]]
key = 'rel'
val = ' exec $CURRENT_SHELL -l'
cat = 'cmds'
desc = 'Reload shell and replace current instance'

# rust/cargo {{{3
[[abbr]]
key = 'cup'
val = 'rustup update && cargo install-update --all --git'
cat = 'cmds'
desc = 'Update rust toolchains all packages installed by cargo'

# c++ {{{3
[[abbr]]
key = 'cpc'
val = 'cppcheck --enable=all .'
cat = 'cmds'
desc = 'Run cppcheck recursively in current directory, reporting all issues'

# dotdrop {{{3
[[abbr]]
key = 'dotgit'
val = 'git -C $DOTDIR'
cat = 'cmds'
desc = 'Run git in dotfiles directory'

# just {{{3
[[abbr]]
key = 'j'
val = 'just'
cat = 'cmds'
desc = 'Run just'

[[abbr]]
key = 'u'
val = 'just'
cat = 'cmds'
desc = 'Run just'

[[abbr]]
key = 'm'
val = 'just'
cat = 'cmds'
desc = 'Run just -- like `make`'

# Aliases Only {{{1
# git {{{2
[[alias]]
key = 'git'
val = 'hub'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Wrapper for git with extra GitHub features'

# grep {{{2
[[alias]]
key = 'grep'
val = 'grep -R --color=auto'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Color default for grep'

[[alias]]
key = 'fgrep'
val = 'fgrep --color=auto'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Color default for fgrep'

[[alias]]
key = 'egrep'
val = 'egrep --color=auto'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'Color default for grep'

# commands {{{2
# [[alias]]
# key = 'vim'
# val = '$VISUAL'
# cat = 'cmds'
# shell = ['bash','zsh']
# desc = 'Alias vim or nvim to `vim` command'

[[alias]]
key = 'todo'
val = 'todo.sh'
cat = 'cmds'
shell = ['bash','zsh']
desc = 'todo.txt cli'
